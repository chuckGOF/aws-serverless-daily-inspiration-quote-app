# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: serverlessfg
# "service" is the name of this project. This will also be added to your AWS resource names.
service: aws-daily-inspiration-quote


custom:
  tableName: "users-table-${sls:stage}"
  region: ${self:provider.region}
  bucketName: ${env:BUCKET_NAME}
  email: ${env:EMAIL_FROM}

stages:
  default:
    params:
      tableName: "users-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "SNS:Publish"
          Resource: !Ref QuotesMessages
        - Effect: Allow
          Action: "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    BUCKET_NAME: ${self:custom.bucketName}
    SNS_TOPIC_ARN: !Ref QuotesMessages
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    EMAIL_FROM: ${self:custom.email}

functions:
  quotes:
    handler: handler/getQuotes.getQuotes
    events:
      - http: 
          path: quotes
          method: get
          cors: true

  subscribe:
    handler: handler/subscribeUser.subscribeUser
    events:
      - http:
          path: subscribe
          method: post
          cors: true

  staticMailer:
    handler: handler/staticMailer.staticMailer
    events:
      - http:
          path: static-mailer
          method: post
          cors: true

  sendEmail:
    handler: handler/sendEmail.sendEmail
    events:
      - http:
          path: send-email
          method: post
          cors: true
      - schedule: cron(0 13 * * ? *)
  
  getSubscribers:
    handler: handler/getSubscribers.getSubscribers
    events:
      - http:
          path: get-subscribers
          method: get
          cors: true


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    QuotesMessages:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: quotes-messages-${sls:stage}
    QuotesMessagesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref QuotesMessages
        Protocol: email
        Endpoint: ${self:custom.email}
        DeliveryPolicy:
          healthyRetryPolicy:
            numRetries: 3
            minDelayTarget: 20
            maxDelayTarget: 60
            backoffFunction: exponential
